pipeline {
	agent any
	parameters {
		choice(name: 'NETWORK', choices: ['STAGING', 'PRODUCTION'], description: 'The network to clone from and activate to')
		string(name: 'CONFIGNAME', defaultValue: "bigmanuel-eu.edgesuite-staging.net", description: 'The domain you are adding to the configuration') 
	}
	environment {
    	PROJ = "/bin:/usr/local/bin:/usr/bin"
	}
	stages {
		stage('CreateNewVersion') {
			steps {
				withEnv(["PATH+EXTRA=$PROJ"]) {
					//sh "akamai appsec configs --section default --json | jq '.configurations[] | select (.name | test (\"gss-ta-demo\"))'"
					sh "akamai appsec --section default clone --config=40539 --version=STAGING"
					//${NETWORK}"
					//echo "OK"
				}
			}
		}
		stage('AddHostname') {
			steps {
				withEnv(["PATH+EXTRA=$PROJ"]) {
					sh "akamai appsec --section default add-hostname --config=40539 ${CONFIGNAME}"
					//echo "also OK"
				}
			}
		}
		stage('ClonePolicy') {
			steps {
				withEnv(["PATH+EXTRA=$PROJ"]) {
					script {
                 	   def policyId = sh(script: "akamai appsec --section default clone-policy ODPP_78900 --config=40539  --prefix=${env.BUILD_ID}  --json | jq '.policyId'", returnStdout: true).trim()
                 	   println("policyId = ${policyId}")
                 	   sh(script: "akamai appsec --section default create-match-target --config=40539 --hostnames=${CONFIGNAME} --paths='/*' --policy=${policyId} ", returnStdout: true).trim()
                 	   
                	}
				}
			}
		}
		stage('ActivateConfig') {
			steps {
				withEnv(["PATH+EXTRA=$PROJ"]) {
					sh "akamai appsec activate --section default --config=40539 --network=${NETWORK} --notes='automated' --notify=maalvare@akamai.com"
				}
			}
		}
	}
}
